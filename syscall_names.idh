/*
 * names.idh -- Names of the system calls and hypercalls
 *
 * Copyright (C) Youness Alaoui (KaKaRoTo)
 * Copyright (C) (makeclean)
 *
 * This software is distributed under the terms of the GNU General Public
 * License ("GPL") version 3, as published by the Free Software Foundation.
 *
 */

#include <idc.idc>


static get_hvcall_rawname(num)
{
        if(     num ==   0) return "allocate_memory";
        else if(num ==   1) return "write_htab_entry";
        else if(num ==   2) return "construct_virtual_address_space";
        else if(num ==   3) return "invalidate_htab_entries";
        else if(num ==   4) return "get_virtual_address_space_id_of_ppe";
        else if(num ==   6) return "query_logical_partition_address_region_info";
        else if(num ==   7) return "select_virtual_address_space";
        else if(num ==   9) return "pause";
        else if(num ==  10) return "destruct_virtual_address_space";
        else if(num ==  11) return "configure_irq_state_bitmap";
        else if(num ==  12) return "connect_irq_plug_ext";
        else if(num ==  13) return "release_memory";
        else if(num ==  15) return "put_iopte";
        else if(num ==  16) return "peek";
        else if(num ==  17) return "disconnect_irq_plug_ext";
        else if(num ==  18) return "construct_event_receive_port";
        else if(num ==  19) return "destruct_event_receive_port";
        else if(num ==  20) return "poke";
        else if(num ==  24) return "send_event_locally";
        else if(num ==  26) return "detect_pending_interrupts";
        else if(num ==  27) return "end_of_interrupt";
        else if(num ==  28) return "connect_irq_plug";
        else if(num ==  29) return "disconnect_irq_plug";
        else if(num ==  30) return "end_of_interrupt_ext";
        else if(num ==  31) return "did_update_interrupt_mask";
        else if(num ==  44) return "shutdown_logical_partition";
        else if(num ==  54) return "destruct_logical_spe";
        else if(num ==  57) return "construct_logical_spe";
        else if(num ==  61) return "set_spe_interrupt_mask";
        else if(num ==  64) return "set_spe_transition_notifier";
        else if(num ==  65) return "disable_logical_spe";
        else if(num ==  66) return "clear_spe_interrupt_status";
        else if(num ==  67) return "get_spe_interrupt_status";
        else if(num ==  69) return "get_logical_ppe_id";
        else if(num ==  73) return "set_interrupt_mask";
        else if(num ==  74) return "get_logical_partition_id";
        else if(num ==  77) return "configure_execution_time_variable";
        else if(num ==  78) return "get_spe_irq_outlet";
        else if(num ==  79) return "set_spe_privilege_state_area_1_register";
        else if(num ==  90) return "create_repository_node";
        else if(num ==  91) return "get_repository_node_value";
        else if(num ==  92) return "modify_repository_node_value";
        else if(num ==  93) return "remove_repository_node";
        else if(num ==  95) return "read_htab_entries";
        else if(num ==  96) return "set_dabr";
        else if(num ==  97) return "set_vmx_graphics_mode";
        else if(num ==  98) return "set_thread_switch_control_register";
        else if(num == 116) return "allocate_io_segment";
        else if(num == 117) return "release_io_segment";
        else if(num == 118) return "allocate_ioid";
        else if(num == 119) return "release_ioid";
        else if(num == 120) return "construct_io_irq_outlet";
        else if(num == 121) return "destruct_io_irq_outlet";
        else if(num == 122) return "map_htab";
        else if(num == 123) return "unmap_htab";
        else if(num == 127) return "get_version_info";
        else if(num == 140) return "construct_lpm";
        else if(num == 141) return "destruct_lpm";
        else if(num == 142) return "start_lpm";
        else if(num == 143) return "stop_lpm";
        else if(num == 144) return "copy_lpm_trace_buffer";
        else if(num == 145) return "add_lpm_event_bookmark";
        else if(num == 146) return "delete_lpm_event_bookmark";
        else if(num == 147) return "set_lpm_interrupt_mask";
        else if(num == 148) return "get_lpm_interrupt_status";
        else if(num == 149) return "set_lpm_general_control";
        else if(num == 150) return "set_lpm_interval";
        else if(num == 151) return "set_lpm_trigger_control";
        else if(num == 152) return "set_lpm_counter_control";
        else if(num == 153) return "set_lpm_group_control";
        else if(num == 154) return "set_lpm_debug_bus_control";
        else if(num == 155) return "set_lpm_counter";
        else if(num == 156) return "set_lpm_signal";
        else if(num == 157) return "set_lpm_spr_trigger";
        else if(num == 158) return "insert_htab_entry";
        else if(num == 162) return "read_virtual_uart";
        else if(num == 163) return "write_virtual_uart";
        else if(num == 164) return "set_virtual_uart_param";
        else if(num == 165) return "get_virtual_uart_param";
        else if(num == 166) return "configure_virtual_uart_irq";
        else if(num == 170) return "open_device";
        else if(num == 171) return "close_device";
        else if(num == 172) return "map_device_mmio_region";
        else if(num == 173) return "unmap_device_mmio_region";
        else if(num == 174) return "allocate_device_dma_region";
        else if(num == 175) return "free_device_dma_region";
        else if(num == 176) return "map_device_dma_region";
        else if(num == 177) return "unmap_device_dma_region";
        else if(num == 178) return "read_pci_config";
        else if(num == 179) return "write_pci_config";
        else if(num == 180) return "read_pci_io";
        else if(num == 181) return "write_pci_io";
        else if(num == 185) return "net_add_multicast_address";
        else if(num == 186) return "net_remove_multicast_address";
        else if(num == 187) return "net_start_tx_dma";
        else if(num == 188) return "net_stop_tx_dma";
        else if(num == 189) return "net_start_rx_dma";
        else if(num == 190) return "net_stop_rx_dma";
        else if(num == 191) return "net_set_interrupt_status_indicator";
        else if(num == 193) return "net_set_interrupt_mask";
        else if(num == 194) return "net_control";
        else if(num == 197) return "connect_interrupt_event_receive_port";
        else if(num == 198) return "disconnect_interrupt_event_receive_port";
        else if(num == 199) return "get_spe_all_interrupt_statuses";
        else if(num == 202) return "deconfigure_virtual_uart_irq";
        else if(num == 207) return "enable_logical_spe";
        else if(num == 210) return "gpu_open";
        else if(num == 211) return "gpu_close";
        else if(num == 212) return "gpu_device_map";
        else if(num == 213) return "gpu_device_unmap";
        else if(num == 214) return "gpu_memory_allocate";
        else if(num == 216) return "gpu_memory_free";
        else if(num == 217) return "gpu_context_allocate";
        else if(num == 218) return "gpu_context_free";
        else if(num == 221) return "gpu_context_iomap";
        else if(num == 225) return "gpu_context_attribute";
        else if(num == 227) return "gpu_context_intr";
        else if(num == 228) return "gpu_attribute";
        else if(num == 232) return "get_rtc";
        else if(num == 240) return "set_ppe_periodic_tracer_frequency";
        else if(num == 241) return "start_ppe_periodic_tracer";
        else if(num == 242) return "stop_ppe_periodic_tracer";
        else if(num == 245) return "storage_read";
        else if(num == 246) return "storage_write";
        else if(num == 248) return "storage_send_device_command";
        else if(num == 249) return "storage_get_async_status";
        else if(num == 254) return "storage_check_async_status";
        else if(num == 255) return "panic";
        else
                            return form("undocumented_function_%d", num);
}

static get_lv2_rawname(num)
{
        if(     num == 0x000) return "not_implemented";
        else if(num == 0x3DD) return "989";
        else if(num == 0x3DB) return "987";
        else if(num == 0x3DA) return "986";
        else if(num == 0x3D9) return "985";
        else if(num == 0x3D8) return "984";
        else if(num == 0x3D7) return "983";
        else if(num == 0x3D6) return "982";
        else if(num == 0x3D5) return "981";
        else if(num == 0x3D4) return "980";
        else if(num == 0x3D3) return "979";
        else if(num == 0x3D2) return "978";
        else if(num == 0x3D1) return "977";
        else if(num == 0x3D0) return "976";
        else if(num == 0x3CF) return "975";
        else if(num == 0x3CE) return "974";
        else if(num == 0x3CD) return "973";
        else if(num == 0x3CC) return "972";
        else if(num == 0x3CB) return "971";
        else if(num == 0x3CA) return "970";
        else if(num == 0x3C9) return "969";
        else if(num == 0x3C8) return "968";
        else if(num == 0x3C7) return "967";
        else if(num == 0x3C6) return "966";
        else if(num == 0x3C5) return "965";
        else if(num == 0x3C4) return "964";
        else if(num == 0x3C3) return "963";
        else if(num == 0x3C2) return "sys_performance_monitor_bookmark";
        else if(num == 0x3C1) return "sys_performance_monitor_hidden";
        else if(num == 0x3C0) return "sys_performance_monitor";
        else if(num == 0x3BF) return "959";
        else if(num == 0x3BE) return "sys_dbg_comm_register_driver";
        else if(num == 0x3BD) return "sys_dbg_comm_register_handler";
        else if(num == 0x3BC) return "sys_dbg_comm_write_ready";
        else if(num == 0x3BB) return "sys_dbg_comm_write_64";
        else if(num == 0x3BA) return "sys_dbg_comm_read_ready";
        else if(num == 0x3B9) return "sys_dbg_comm_read_64";
        else if(num == 0x3B8) return "sys_dbg_comm_close";
        else if(num == 0x3B7) return "sys_dbg_comm_open";
        else if(num == 0x3B6) return "sys_dbg_comm_init";
        else if(num == 0x3B5) return "949";
        else if(num == 0x3B4) return "948";
        else if(num == 0x3B3) return "947";
        else if(num == 0x3B2) return "946";
        else if(num == 0x3B1) return "945";
        else if(num == 0x3B0) return "944";
        else if(num == 0x3AF) return "943";
        else if(num == 0x3AE) return "942";
        else if(num == 0x3AD) return "941";
        else if(num == 0x3AC) return "940";
        else if(num == 0x3AB) return "939";
        else if(num == 0x3AA) return "938";
        else if(num == 0x3A9) return "937";
        else if(num == 0x3A8) return "936";
        else if(num == 0x3A7) return "935";
        else if(num == 0x3A6) return "934";
        else if(num == 0x3A5) return "933";
        else if(num == 0x3A4) return "932";
        else if(num == 0x3A3) return "sys_dbg_get_shared_memory_attribute_list_64";
        else if(num == 0x3A2) return "sys_dbg_get_user_memory_stat_64";
        else if(num == 0x3A1) return "sys_dbg_terminate_scratch_data_area";
        else if(num == 0x3A0) return "sys_dbg_initialize_scratch_data_area_64";
        else if(num == 0x39F) return "sys_dbg_terminate_scratch_executable_area";
        else if(num == 0x39E) return "sys_dbg_initialize_scratch_executable_area_64";
        else if(num == 0x39D) return "sys_dbg_get_module_info_64";
        else if(num == 0x39C) return "sys_dbg_get_module_list";
        else if(num == 0x39B) return "sys_dbg_set_spu_thread_group_event_cntl_flag";
        else if(num == 0x39A) return "sys_dbg_get_spu_thread_group_event_cntl_flag";
        else if(num == 0x399) return "sys_dbg_set_process_event_cntl_flag";
        else if(num == 0x398) return "sys_dbg_get_process_event_cntl_flag";
        else if(num == 0x397) return "sys_dbg_destroy_event_que";
        else if(num == 0x396) return "sys_dbg_read_event";
        else if(num == 0x395) return "sys_dbg_create_event_que";
        else if(num == 0x394) return "sys_dbg_spu_thread_get_exception_cause";
        else if(num == 0x393) return "sys_dbg_set_run_control_bit_to_spu";
        else if(num == 0x392) return "sys_dbg_get_process_info_64";
        else if(num == 0x391) return "sys_dbg_kill_process";
        else if(num == 0x390) return "sys_dbg_spu_thread_write_to_ls";
        else if(num == 0x38F) return "sys_dbg_spu_thread_read_from_ls";
        else if(num == 0x38E) return "sys_dbg_get_thread_info_64";
        else if(num == 0x38D) return "sys_dbg_get_thread_list";
        else if(num == 0x38C) return "sys_dbg_get_process_list";
        else if(num == 0x38B) return "sys_dbg_write_thread_register";
        else if(num == 0x38A) return "sys_dbg_read_thread_register";
        else if(num == 0x389) return "sys_dbg_write_process_memory_64";
        else if(num == 0x388) return "sys_dbg_read_process_memory_64";
        else if(num == 0x387) return "sys_dbg_continue_threads";
        else if(num == 0x386) return "sys_dbg_stop_threads";
        else if(num == 0x385) return "sys_dbg_continue_processes";
        else if(num == 0x384) return "sys_dbg_stop_processes";
        else if(num == 0x379) return "889";
        else if(num == 0x375) return "sys_deci3_open2";
        else if(num == 0x374) return "sys_deci3_receive";
        else if(num == 0x373) return "sys_deci3_send";
        else if(num == 0x372) return "sys_deci3_close";
        else if(num == 0x371) return "sys_deci3_create_event_path";
        else if(num == 0x370) return "sys_deci3_open";
        else if(num == 0x36F) return "879";
        else if(num == 0x36E) return "878";
        else if(num == 0x36D) return "877";
        else if(num == 0x36C) return "876";
        else if(num == 0x36B) return "875";
        else if(num == 0x36A) return "874";
        else if(num == 0x369) return "sys_ss_get_cache_of_product_mode";
        else if(num == 0x368) return "sys_ss_get_open_psid";
        else if(num == 0x367) return "871";
        else if(num == 0x366) return "870";
        else if(num == 0x365) return "869";
        else if(num == 0x364) return "868";
        else if(num == 0x363) return "867";
        else if(num == 0x362) return "866";
        else if(num == 0x361) return "865";
        else if(num == 0x360) return "864";
        else if(num == 0x35F) return "863";
        else if(num == 0x35E) return "862";
        else if(num == 0x35D) return "861";
        else if(num == 0x35C) return "860";
        else if(num == 0x34F) return "847";
        else if(num == 0x34E) return "sys_fs_mapped_free";
        else if(num == 0x34D) return "sys_fs_mapped_allocate_64";
        else if(num == 0x34C) return "sys_fs_get_fs_info";
        else if(num == 0x34B) return "sys_fs_get_fs_info_size";
        else if(num == 0x34A) return "sys_fs_get_mount_info";
        else if(num == 0x349) return "sys_fs_get_mount_info_size";
        else if(num == 0x348) return "sys_fs_disk_free";
        else if(num == 0x347) return "sys_fs_sync";
        else if(num == 0x346) return "sys_fs_umount";
        else if(num == 0x345) return "sys_fs_mount_64";
        else if(num == 0x344) return "sys_fs_newfs_64";
        else if(num == 0x343) return "sys_fs_chown";
        else if(num == 0x342) return "sys_fs_chmod";
        else if(num == 0x341) return "sys_fs_symbolic_link";
        else if(num == 0x340) return "sys_fs_ftruncate";
        else if(num == 0x33F) return "sys_fs_truncate";
        else if(num == 0x33E) return "sys_fs_lsn_write";
        else if(num == 0x33D) return "sys_fs_lsn_read";
        else if(num == 0x33C) return "sys_fs_lsn_unlock";
        else if(num == 0x33B) return "sys_fs_lsn_lock";
        else if(num == 0x33A) return "sys_fs_lsn_get_cda";
        else if(num == 0x339) return "sys_fs_lsn_get_cda_size";
        else if(num == 0x338) return "sys_fs_acl_write";
        else if(num == 0x337) return "sys_fs_acl_read";
        else if(num == 0x336) return "sys_fs_get_block_size";
        else if(num == 0x335) return "sys_fs_fget_block_size";
        else if(num == 0x334) return "sys_fs_fsync";
        else if(num == 0x333) return "sys_fs_fdatasync";
        else if(num == 0x332) return "sys_fs_lseek";
        else if(num == 0x331) return "sys_fs_fcntl";
        else if(num == 0x330) return "sys_fs_access";
        else if(num == 0x32F) return "sys_fs_utime";
        else if(num == 0x32E) return "sys_fs_unlink";
        else if(num == 0x32D) return "sys_fs_rmdir";
        else if(num == 0x32C) return "sys_fs_rename";
        else if(num == 0x32B) return "sys_fs_mkdir";
        else if(num == 0x32A) return "sys_fs_link";
        else if(num == 0x329) return "sys_fs_fstat";
        else if(num == 0x328) return "sys_fs_stat";
        else if(num == 0x327) return "sys_fs_closedir";
        else if(num == 0x326) return "sys_fs_readdir";
        else if(num == 0x325) return "sys_fs_opendir";
        else if(num == 0x324) return "sys_fs_close";
        else if(num == 0x323) return "sys_fs_write";
        else if(num == 0x322) return "sys_fs_read";
        else if(num == 0x321) return "sys_fs_open";
        else if(num == 0x320) return "sys_fs_test";
        else if(num == 0x2D6) return "_sys_net_eurus_post_command";
        else if(num == 0x2D5) return "_sys_net_sysctl";
        else if(num == 0x2D4) return "_sys_net_ioctl";
        else if(num == 0x2D3) return "_sys_net_control";
        else if(num == 0x2D2) return "_sys_net_infoctl";
        else if(num == 0x2D1) return "_sys_net_abortx";
        else if(num == 0x2D0) return "_sys_net_write_dump";
        else if(num == 0x2CF) return "_sys_net_close_dump";
        else if(num == 0x2CE) return "_sys_net_read_dump";
        else if(num == 0x2CD) return "_sys_net_open_dump";
        else if(num == 0x2CC) return "_sys_net_select";
        else if(num == 0x2CB) return "_sys_net_poll";
        else if(num == 0x2CA) return "_sys_net_close";
        else if(num == 0x2C9) return "_sys_net_socket";
        else if(num == 0x2C8) return "_sys_net_shutdown";
        else if(num == 0x2C7) return "_sys_net_setsockopt";
        else if(num == 0x2C6) return "_sys_net_sendto";
        else if(num == 0x2C5) return "_sys_net_sendmsg";
        else if(num == 0x2C4) return "_sys_net_recvmsg";
        else if(num == 0x2C3) return "_sys_net_recvfrom";
        else if(num == 0x2C2) return "_sys_net_listen";
        else if(num == 0x2C1) return "_sys_net_getsockopt";
        else if(num == 0x2C0) return "_sys_net_getsockname";
        else if(num == 0x2BF) return "_sys_net_getpeername";
        else if(num == 0x2BE) return "_sys_net_connect";
        else if(num == 0x2BD) return "_sys_net_bind";
        else if(num == 0x2BC) return "_sys_net_accept";
        else if(num == 0x2BB) return "sys_iosys_infra_test_close";
        else if(num == 0x2B8) return "696";
        else if(num == 0x2B7) return "695";
        else if(num == 0x2B6) return "694";
        else if(num == 0x2B5) return "693";
        else if(num == 0x2B4) return "692";
        else if(num == 0x2B3) return "691";
        else if(num == 0x2B2) return "690";
        else if(num == 0x2B1) return "689";
        else if(num == 0x2B0) return "688";
        else if(num == 0x2AF) return "687";
        else if(num == 0x2AE) return "686";
        else if(num == 0x2AD) return "685";
        else if(num == 0x2AC) return "684";
        else if(num == 0x2AB) return "683";
        else if(num == 0x2AA) return "682";
        else if(num == 0x2A9) return "681";
        else if(num == 0x2A8) return "sys_rsx_audio_iounmap";
        else if(num == 0x2A7) return "sys_rsx_audio_iomap";
        else if(num == 0x2A6) return "sys_rsx_audio_queue";
        else if(num == 0x2A5) return "sys_rsx_audio_setup";
        else if(num == 0x2A4) return "sys_rsx_device_unmap";
        else if(num == 0x2A3) return "sys_rsx_device_map";
        else if(num == 0x2A2) return "sys_rsx_context_attribute";
        else if(num == 0x2A1) return "sys_rsx_context_iounmap";
        else if(num == 0x2A0) return "sys_rsx_context_iomap";
        else if(num == 0x29F) return "sys_rsx_context_free";
        else if(num == 0x29E) return "sys_rsx_context_allocate";
        else if(num == 0x29D) return "sys_rsx_memory_free";
        else if(num == 0x29C) return "sys_rsx_memory_allocate";
        else if(num == 0x29B) return "sys_rsx_device_close";
        else if(num == 0x29A) return "sys_rsx_device_open";
        else if(num == 0x293) return "659";
        else if(num == 0x292) return "sys_rsxaudio_stop_process";
        else if(num == 0x291) return "sys_rsxaudio_start_process";
        else if(num == 0x290) return "sys_rsxaudio_prepare_process";
        else if(num == 0x28F) return "sys_rsxaudio_close_connection";
        else if(num == 0x28E) return "sys_rsxaudio_create_connection";
        else if(num == 0x28D) return "sys_rsxaudio_unimport_shared_memory";
        else if(num == 0x28C) return "sys_rsxaudio_import_shared_memory";
        else if(num == 0x28B) return "sys_rsxaudio_finalize";
        else if(num == 0x28A) return "sys_rsxaudio_initialize";
        else if(num == 0x289) return "649";
        else if(num == 0x288) return "648";
        else if(num == 0x287) return "647";
        else if(num == 0x286) return "646";
        else if(num == 0x285) return "645";
        else if(num == 0x284) return "644";
        else if(num == 0x283) return "643";
        else if(num == 0x282) return "642";
        else if(num == 0x281) return "641";
        else if(num == 0x280) return "640";
        else if(num == 0x27F) return "639";
        else if(num == 0x27E) return "638";
        else if(num == 0x27D) return "637";
        else if(num == 0x27C) return "636";
        else if(num == 0x27B) return "635";
        else if(num == 0x27A) return "sys_fsw_disconnect_event";
        else if(num == 0x279) return "sys_fsw_connect_event";
        else if(num == 0x277) return "sys_gpio_get";
        else if(num == 0x276) return "sys_gpio_set";
        else if(num == 0x273) return "sys_io_buffer_free";
        else if(num == 0x272) return "sys_io_buffer_allocate_64";
        else if(num == 0x271) return "sys_io_buffer_destroy";
        else if(num == 0x270) return "sys_io_buffer_create";
        else if(num == 0x26F) return "623";
        else if(num == 0x26E) return "622";
        else if(num == 0x26D) return "621";
        else if(num == 0x26C) return "620";
        else if(num == 0x26B) return "sys_storage_async_send_device_command";
        else if(num == 0x26A) return "sys_storage_set_region_acl";
        else if(num == 0x269) return "sys_storage_get_region_acl";
        else if(num == 0x268) return "sys_storage_execute_device_command";
        else if(num == 0x267) return "sys_storage_delete_region";
        else if(num == 0x266) return "sys_storage_create_region";
        else if(num == 0x265) return "sys_storage_set_medium_polling_interval";
        else if(num == 0x264) return "sys_storage_configure_medium_event";
        else if(num == 0x263) return "sys_storage_report_devices";
        else if(num == 0x262) return "sys_storage_get_device_config";
        else if(num == 0x261) return "sys_storage_get_device_info";
        else if(num == 0x260) return "sys_storage_async_cancel";
        else if(num == 0x25F) return "sys_storage_async_write";
        else if(num == 0x25E) return "sys_storage_async_read";
        else if(num == 0x25D) return "sys_storage_async_configure";
        else if(num == 0x25C) return "sys_storage_send_device_command";
        else if(num == 0x25B) return "sys_storage_write";
        else if(num == 0x25A) return "sys_storage_read";
        else if(num == 0x259) return "sys_storage_close";
        else if(num == 0x258) return "sys_storage_open";
        else if(num == 0x257) return "599";
        else if(num == 0x256) return "598";
        else if(num == 0x255) return "597";
        else if(num == 0x254) return "596";
        else if(num == 0x253) return "595";
        else if(num == 0x252) return "594";
        else if(num == 0x251) return "593";
        else if(num == 0x250) return "592";
        else if(num == 0x24F) return "591";
        else if(num == 0x24E) return "590";
        else if(num == 0x24D) return "589";
        else if(num == 0x24C) return "588";
        else if(num == 0x24B) return "587";
        else if(num == 0x24A) return "586";
        else if(num == 0x249) return "585";
        else if(num == 0x248) return "584";
        else if(num == 0x247) return "583";
        else if(num == 0x246) return "582";
        else if(num == 0x245) return "581";
        else if(num == 0x244) return "580";
        else if(num == 0x243) return "579";
        else if(num == 0x242) return "578";
        else if(num == 0x241) return "577";
        else if(num == 0x23F) return "575";
        else if(num == 0x23E) return "574";
        else if(num == 0x23D) return "573";
        else if(num == 0x23C) return "572";
        else if(num == 0x23B) return "571";
        else if(num == 0x23A) return "570";
        else if(num == 0x239) return "569";
        else if(num == 0x238) return "568";
        else if(num == 0x237) return "567";
        else if(num == 0x236) return "566";
        else if(num == 0x235) return "565";
        else if(num == 0x234) return "564";
        else if(num == 0x233) return "563";
        else if(num == 0x232) return "562";
        else if(num == 0x231) return "561";
        else if(num == 0x230) return "560";
        else if(num == 0x22F) return "559";
        else if(num == 0x22E) return "558";
        else if(num == 0x22D) return "557";
        else if(num == 0x22C) return "556";
        else if(num == 0x22B) return "555";
        else if(num == 0x22A) return "554";
        else if(num == 0x229) return "553";
        else if(num == 0x228) return "552";
        else if(num == 0x227) return "551";
        else if(num == 0x226) return "550";
        else if(num == 0x225) return "549";
        else if(num == 0x224) return "sys_usbd_send_event";
        else if(num == 0x223) return "sys_usbd_get_device_location";
        else if(num == 0x222) return "sys_usbd_get_isoch_transfer_status";
        else if(num == 0x221) return "sys_usbd_get_transfer_status";
        else if(num == 0x220) return "sys_usbd_isoch_transfer_data";
        else if(num == 0x21F) return "sys_usbd_transfer_data";
        else if(num == 0x21E) return "sys_usbd_attach";
        else if(num == 0x21D) return "sys_usbd_detect_device";
        else if(num == 0x21C) return "sys_usbd_receive_event";
        else if(num == 0x21B) return "sys_usbd_close_pipe";
        else if(num == 0x21A) return "sys_usbd_open_default_pipe";
        else if(num == 0x219) return "sys_usbd_open_pipe";
        else if(num == 0x218) return "sys_usbd_unregister_ldd";
        else if(num == 0x217) return "sys_usbd_register_ldd";
        else if(num == 0x216) return "sys_usbd_get_descriptor";
        else if(num == 0x215) return "sys_usbd_get_descriptor_size";
        else if(num == 0x214) return "sys_usbd_get_device_list";
        else if(num == 0x213) return "sys_usbd_finalize";
        else if(num == 0x212) return "sys_usbd_initialize";
        else if(num == 0x20D) return "525";
        else if(num == 0x20C) return "524";
        else if(num == 0x20B) return "523";
        else if(num == 0x20A) return "sys_config_unregister_service_internal";
        else if(num == 0x209) return "sys_config_register_service_internal";
        else if(num == 0x208) return "sys_config_remove_service_listener_internal";
        else if(num == 0x207) return "sys_config_add_service_listener_internal";
        else if(num == 0x206) return "sys_config_get_config_event";
        else if(num == 0x205) return "sys_config_close";
        else if(num == 0x204) return "sys_config_open";
        else if(num == 0x202) return "514";
        else if(num == 0x201) return "513";
        else if(num == 0x200) return "512";
        else if(num == 0x1FF) return "511";
        else if(num == 0x1FE) return "510";
        else if(num == 0x1FD) return "sys_hid_manager_release_focus";
        else if(num == 0x1FC) return "sys_hid_manager_grab_focus";
        else if(num == 0x1FB) return "sys_hid_manager_remove_hot_key_observer";
        else if(num == 0x1FA) return "sys_hid_manager_add_hot_key_observer";
        else if(num == 0x1F9) return "sys_hid_manager_unmap_logical_id_to_port_id";
        else if(num == 0x1F8) return "sys_hid_manager_map_logical_id_to_port_id";
        else if(num == 0x1F7) return "sys_hid_manager_ioctl";
        else if(num == 0x1F6) return "sys_hid_manager_read";
        else if(num == 0x1F5) return "sys_hid_manager_close";
        else if(num == 0x1F4) return "sys_hid_manager_open";
        else if(num == 0x1F3) return "_sys_prx_stop";
        else if(num == 0x1F2) return "_sys_prx_start";
        else if(num == 0x1F1) return "_sys_prx_load_module_on_memcontainer";
        else if(num == 0x1F0) return "_sys_prx_get_module_id_by_name";
        else if(num == 0x1EF) return "_sys_prx_get_module_info";
        else if(num == 0x1EE) return "_sys_prx_get_module_list";
        else if(num == 0x1ED) return "493";
        else if(num == 0x1EC) return "492";
        else if(num == 0x1EA) return "_sys_prx_query_library";
        else if(num == 0x1E9) return "_sys_prx_unlink_library";
        else if(num == 0x1E8) return "_sys_prx_link_library";
        else if(num == 0x1E7) return "_sys_prx_unregister_library";
        else if(num == 0x1E6) return "_sys_prx_register_library";
        else if(num == 0x1E5) return "_sys_prx_query_module";
        else if(num == 0x1E4) return "_sys_prx_register_module";
        else if(num == 0x1E3) return "_sys_prx_unload_module";
        else if(num == 0x1E2) return "_sys_prx_stop_module";
        else if(num == 0x1E1) return "_sys_prx_start_module";
        else if(num == 0x1E0) return "_sys_prx_load_module";
        else if(num == 0x1DC) return "476";
        else if(num == 0x1DB) return "475";
        else if(num == 0x1DA) return "474";
        else if(num == 0x1D9) return "473";
        else if(num == 0x1D8) return "472";
        else if(num == 0x1D7) return "471";
        else if(num == 0x1D6) return "470";
        else if(num == 0x1D4) return "468";
        else if(num == 0x1D3) return "467";
        else if(num == 0x1D2) return "466";
        else if(num == 0x1D1) return "465";
        else if(num == 0x1D0) return "_sys_prx_load_module_on_memcontainer_by_fd";
        else if(num == 0x1CF) return "_sys_prx_load_module_by_fd";
        else if(num == 0x1CE) return "462";
        else if(num == 0x1CD) return "_sys_prx_get_module_id_by_address";
        else if(num == 0x1CC) return "460";
        else if(num == 0x1CA) return "458";
        else if(num == 0x1C9) return "sys_overlay_get_module_dbg_info";
        else if(num == 0x1C8) return "sys_overlay_get_sdk_version";
        else if(num == 0x1C7) return "sys_overlay_get_module_info2";
        else if(num == 0x1C6) return "sys_overlay_load_module_by_fd";
        else if(num == 0x1C5) return "sys_overlay_get_module_info";
        else if(num == 0x1C4) return "sys_overlay_get_module_list";
        else if(num == 0x1C3) return "sys_overlay_unload_module";
        else if(num == 0x1C2) return "sys_overlay_load_module";
        else if(num == 0x19F) return "415";
        else if(num == 0x19E) return "414";
        else if(num == 0x19D) return "413";
        else if(num == 0x19C) return "412";
        else if(num == 0x19B) return "411";
        else if(num == 0x19A) return "410";
        else if(num == 0x199) return "409";
        else if(num == 0x198) return "408";
        else if(num == 0x197) return "407";
        else if(num == 0x196) return "406";
        else if(num == 0x195) return "405";
        else if(num == 0x194) return "404";
        else if(num == 0x193) return "sys_tty_write";
        else if(num == 0x192) return "sys_tty_read";
        else if(num == 0x191) return "401";
        else if(num == 0x190) return "400";
        else if(num == 0x18E) return "398";
        else if(num == 0x18D) return "397";
        else if(num == 0x18C) return "396";
        else if(num == 0x18B) return "395";
        else if(num == 0x18A) return "394";
        else if(num == 0x189) return "393";
        else if(num == 0x188) return "392";
        else if(num == 0x187) return "391";
        else if(num == 0x186) return "390";
        else if(num == 0x185) return "389";
        else if(num == 0x184) return "388";
        else if(num == 0x183) return "387";
        else if(num == 0x182) return "386";
        else if(num == 0x181) return "385";
        else if(num == 0x180) return "384";
        else if(num == 0x17F) return "383";
        else if(num == 0x17E) return "382";
        else if(num == 0x17D) return "381";
        else if(num == 0x17C) return "380";
        else if(num == 0x17B) return "379";
        else if(num == 0x17A) return "378";
        else if(num == 0x179) return "377";
        else if(num == 0x178) return "376";
        else if(num == 0x177) return "375";
        else if(num == 0x176) return "374";
        else if(num == 0x175) return "373";
        else if(num == 0x174) return "372";
        else if(num == 0x172) return "370";
        else if(num == 0x171) return "369";
        else if(num == 0x170) return "368";
        else if(num == 0x16F) return "367";
        else if(num == 0x16C) return "364";
        else if(num == 0x16B) return "363";
        else if(num == 0x16A) return "362";
        else if(num == 0x169) return "361";
        else if(num == 0x168) return "360";
        else if(num == 0x167) return "359";
        else if(num == 0x166) return "358";
        else if(num == 0x165) return "357";
        else if(num == 0x164) return "356";
        else if(num == 0x163) return "355";
        else if(num == 0x162) return "354";
        else if(num == 0x161) return "sys_memory_get_user_memory_stat";
        else if(num == 0x160) return "sys_memory_get_user_memory_size";
        else if(num == 0x15F) return "sys_memory_get_page_attribute";
        else if(num == 0x15E) return "sys_memory_allocate_from_container";
        else if(num == 0x15D) return "sys_memory_free";
        else if(num == 0x15C) return "sys_memory_allocate";
        else if(num == 0x15B) return "347";
        else if(num == 0x15A) return "346";
        else if(num == 0x159) return "345";
        else if(num == 0x158) return "344";
        else if(num == 0x157) return "sys_memory_container_get_size";
        else if(num == 0x156) return "sys_memory_container_destroy";
        else if(num == 0x155) return "sys_memory_container_create";
        else if(num == 0x154) return "340";
        else if(num == 0x153) return "339";
        else if(num == 0x152) return "sys_mmapper_get_shared_memory_attribute";
        else if(num == 0x151) return "sys_mmapper_search_and_map";
        else if(num == 0x150) return "sys_mmapper_change_address_access_right";
        else if(num == 0x14F) return "sys_mmapper_unmap_shared_memory";
        else if(num == 0x14E) return "sys_mmapper_map_shared_memory";
        else if(num == 0x14D) return "sys_mmapper_set_shared_memory_flag";
        else if(num == 0x14C) return "sys_mmapper_allocate_shared_memory";
        else if(num == 0x14B) return "sys_mmapper_free_address";
        else if(num == 0x14A) return "sys_mmapper_allocate_address";
        else if(num == 0x149) return "sys_mmapper_free_shared_memory";
        else if(num == 0x148) return "328";
        else if(num == 0x147) return "sys_mmapper_enable_page_fault_notification";
        else if(num == 0x146) return "326";
        else if(num == 0x145) return "325";
        else if(num == 0x144) return "324";
        else if(num == 0x13B) return "import_user_kernel_shared_memory";
        else if(num == 0x13A) return "finalize_user_kernel_shared_memory";
        else if(num == 0x139) return "initialize_user_kernel_shared_memory";
        else if(num == 0x138) return "memory_dump_stat_by_type";
        else if(num == 0x137) return "memory_dump_heap";
        else if(num == 0x136) return "310";
        else if(num == 0x135) return "309";
        else if(num == 0x134) return "308";
        else if(num == 0x133) return "307";
        else if(num == 0x132) return "306";
        else if(num == 0x131) return "305";
        else if(num == 0x130) return "304";
        else if(num == 0x12F) return "sys_hw_set_vmx_rounding_mode";
        else if(num == 0x12E) return "logical_console_try_getc";
        else if(num == 0x12D) return "301";
        else if(num == 0x12C) return "300";
        else if(num == 0x104) return "sys_spu_image_open_by_fd";
        else if(num == 0x0FE) return "254";
        else if(num == 0x0FD) return "253";
        else if(num == 0x0FC) return "sys_spu_thread_group_disconnect_event_all_threads";
        else if(num == 0x0FB) return "sys_spu_thread_group_connect_event_all_threads";
        else if(num == 0x0FA) return "250";
        else if(num == 0x0F9) return "249";
        else if(num == 0x0F8) return "248";
        else if(num == 0x0F7) return "247";
        else if(num == 0x0F6) return "246";
        else if(num == 0x0F5) return "245";
        else if(num == 0x0F4) return "244";
        else if(num == 0x0F0) return "sys_isolated_spu_read_puint_mb";
        else if(num == 0x0EF) return "sys_isolated_spu_get_spu_cfg";
        else if(num == 0x0EE) return "sys_isolated_spu_set_spu_cfg";
        else if(num == 0x0ED) return "sys_isolated_spu_get_int_stat";
        else if(num == 0x0EC) return "sys_isolated_spu_set_int_stat";
        else if(num == 0x0EB) return "sys_isolated_spu_get_int_mask";
        else if(num == 0x0EA) return "sys_isolated_spu_set_int_mask";
        else if(num == 0x0E9) return "sys_isolated_spu_create_interrupt_tag";
        else if(num == 0x0E8) return "sys_isolated_spu_start";
        else if(num == 0x0E7) return "sys_isolated_spu_destroy";
        else if(num == 0x0E6) return "sys_isolated_spu_create";
        else if(num == 0x0DB) return "logical_console_flush";
        else if(num == 0x0DA) return "logical_console_putc";
        else if(num == 0x0D9) return "logical_console_getc";
        else if(num == 0x0D8) return "logical_console_close";
        else if(num == 0x0D7) return "logical_console_open";
        else if(num == 0x0C7) return "sys_raw_spu_recover_page_fault";
        else if(num == 0x0C6) return "sys_spu_thread_recover_page_fault";
        else if(num == 0x0C5) return "sys_raw_spu_get_spu_cfg";
        else if(num == 0x0C4) return "sys_raw_spu_set_spu_cfg";
        else if(num == 0x0C2) return "sys_spu_thread_unbind_queue";
        else if(num == 0x0C1) return "sys_spu_thread_bind_queue";
        else if(num == 0x0C0) return "sys_spu_thread_disconnect_event";
        else if(num == 0x0BF) return "sys_spu_thread_connect_event";
        else if(num == 0x0BE) return "sys_spu_thread_write_spu_mb";
        else if(num == 0x0BC) return "sys_spu_thread_get_spu_cfg";
        else if(num == 0x0BB) return "sys_spu_thread_set_spu_cfg";
        else if(num == 0x0BA) return "sys_spu_thread_group_disconnect_event";
        else if(num == 0x0B9) return "sys_spu_thread_group_connect_event";
        else if(num == 0x0B8) return "sys_spu_thread_write_snr";
        else if(num == 0x0B6) return "sys_spu_thread_read_ls";
        else if(num == 0x0B5) return "sys_spu_thread_write_ls";
        else if(num == 0x0B4) return "sys_spu_thread_group_get_priority";
        else if(num == 0x0B3) return "sys_spu_thread_group_set_priority";
        else if(num == 0x0B2) return "sys_spu_thread_group_join";
        else if(num == 0x0B1) return "sys_spu_thread_group_terminate";
        else if(num == 0x0B0) return "sys_spu_thread_group_yield";
        else if(num == 0x0AF) return "sys_spu_thread_group_resume";
        else if(num == 0x0AE) return "sys_spu_thread_group_suspend";
        else if(num == 0x0AD) return "sys_spu_thread_group_start";
        else if(num == 0x0AC) return "sys_spu_thread_initialize";
        else if(num == 0x0AB) return "sys_spu_thread_group_destroy";
        else if(num == 0x0AA) return "sys_spu_thread_group_create";
        else if(num == 0x0A9) return "sys_spu_initialize";
        else if(num == 0x0A7) return "sys_spu_thread_group_start_on_exit";
        else if(num == 0x0A6) return "sys_spu_thread_set_argument";
        else if(num == 0x0A5) return "sys_spu_thread_get_exit_status";
        else if(num == 0x0A3) return "sys_raw_spu_read_puint_mb";
        else if(num == 0x0A1) return "sys_raw_spu_destroy";
        else if(num == 0x0A0) return "sys_raw_spu_create";
        else if(num == 0x09F) return "159";
        else if(num == 0x09E) return "_sys_spu_image_close";
        else if(num == 0x09D) return "_sys_spu_image_import";
        else if(num == 0x09C) return "sys_spu_image_open";
        else if(num == 0x09B) return "155";
        else if(num == 0x09A) return "sys_raw_spu_get_int_stat";
        else if(num == 0x099) return "sys_raw_spu_set_int_stat";
        else if(num == 0x098) return "sys_raw_spu_get_int_mask";
        else if(num == 0x097) return "sys_raw_spu_set_int_mask";
        else if(num == 0x096) return "sys_raw_spu_create_interrupt_tag";
        else if(num == 0x094) return "sys_time_get_lpar_timebase_count";
        else if(num == 0x093) return "sys_time_get_timebase_frequency";
        else if(num == 0x092) return "sys_time_set_current_time";
        else if(num == 0x091) return "sys_time_get_current_time";
        else if(num == 0x090) return "sys_time_get_timezone";
        else if(num == 0x08F) return "sys_time_set_timezone";
        else if(num == 0x08E) return "sys_timer_sleep";
        else if(num == 0x08D) return "sys_timer_usleep";
        else if(num == 0x08C) return "sys_event_port_connect_ipc";
        else if(num == 0x08B) return "sys_event_queue_cancel";
        else if(num == 0x08A) return "sys_event_port_send";
        else if(num == 0x089) return "sys_event_port_disconnect";
        else if(num == 0x088) return "sys_event_port_connect_local";
        else if(num == 0x087) return "sys_event_port_destroy";
        else if(num == 0x086) return "sys_event_port_create";
        else if(num == 0x085) return "sys_event_queue_drain";
        else if(num == 0x084) return "sys_event_port_connect_lpar";
        else if(num == 0x083) return "sys_event_queue_tryreceive";
        else if(num == 0x082) return "sys_event_queue_receive";
        else if(num == 0x081) return "sys_event_queue_destroy";
        else if(num == 0x080) return "sys_event_queue_create";
        else if(num == 0x07F) return "sys_rwlock_wunlock";
        else if(num == 0x07E) return "sys_rwlock_trywlock";
        else if(num == 0x07D) return "sys_rwlock_wlock";
        else if(num == 0x07C) return "sys_rwlock_runlock";
        else if(num == 0x07B) return "sys_rwlock_tryrlock";
        else if(num == 0x07A) return "sys_rwlock_rlock";
        else if(num == 0x079) return "sys_rwlock_destroy";
        else if(num == 0x078) return "sys_rwlock_create";
        else if(num == 0x077) return "119";
        else if(num == 0x076) return "118";
        else if(num == 0x075) return "117";
        else if(num == 0x074) return "116";
        else if(num == 0x073) return "115";
        else if(num == 0x072) return "sys_semaphore_get_value";
        else if(num == 0x071) return "sys_syncpoint_wakeup_all";
        else if(num == 0x070) return "sys_syncpoint_wait";
        else if(num == 0x06F) return "sys_syncpoint_destroy";
        else if(num == 0x06E) return "sys_syncpoint_create";
        else if(num == 0x06D) return "sys_cond_signal_all";
        else if(num == 0x06C) return "sys_cond_signal";
        else if(num == 0x06B) return "sys_cond_wait";
        else if(num == 0x06A) return "sys_cond_destroy";
        else if(num == 0x069) return "sys_cond_create";
        else if(num == 0x068) return "sys_mutex_unlock";
        else if(num == 0x067) return "sys_mutex_trylock";
        else if(num == 0x066) return "sys_mutex_lock";
        else if(num == 0x065) return "sys_mutex_destroy";
        else if(num == 0x064) return "sys_mutex_create";
        else if(num == 0x063) return "_sys_sleep_queue_state_change";
        else if(num == 0x062) return "_sys_sleep_queue_wakeup";
        else if(num == 0x061) return "_sys_sleep_queue_sleep";
        else if(num == 0x060) return "_sys_sleep_queue_destroy";
        else if(num == 0x05F) return "_sys_sleep_queue_create";
        else if(num == 0x05E) return "sys_semaphore_post";
        else if(num == 0x05D) return "sys_semaphore_trywait";
        else if(num == 0x05C) return "sys_semaphore_wait";
        else if(num == 0x05B) return "sys_semaphore_destroy";
        else if(num == 0x05A) return "sys_semaphore_create";
        else if(num == 0x059) return "_sys_interrupt_thread_disestablish";
        else if(num == 0x058) return "sys_interrupt_thread_eoi";
        else if(num == 0x057) return "87";
        else if(num == 0x056) return "86";
        else if(num == 0x055) return "85";
        else if(num == 0x054) return "_sys_interrupt_thread_establish";
        else if(num == 0x053) return "sys_interrupt_handler_establish";
        else if(num == 0x052) return "82";
        else if(num == 0x051) return "sys_interrupt_tag_destroy";
        else if(num == 0x050) return "sys_interrupt_tag_create";
        else if(num == 0x04E) return "78";
        else if(num == 0x04D) return "77";
        else if(num == 0x04C) return "sys_timer_disconnect_event_queue";
        else if(num == 0x04B) return "sys_timer_connect_event_queue";
        else if(num == 0x04A) return "sys_timer_stop";
        else if(num == 0x049) return "_sys_timer_start";
        else if(num == 0x048) return "sys_timer_get_information";
        else if(num == 0x047) return "sys_timer_destroy";
        else if(num == 0x046) return "sys_timer_create";
        else if(num == 0x045) return "sys_trace_create2";
        else if(num == 0x044) return "sys_trace_free_buffer";
        else if(num == 0x043) return "sys_trace_allocate_buffer";
        else if(num == 0x042) return "sys_trace_attach_process";
        else if(num == 0x041) return "sys_trace_drain";
        else if(num == 0x040) return "sys_trace_destroy";
        else if(num == 0x03F) return "sys_trace_update_top_index";
        else if(num == 0x03E) return "sys_trace_stop";
        else if(num == 0x03D) return "sys_trace_start";
        else if(num == 0x03C) return "sys_trace_create";
        else if(num == 0x03A) return "58";
        else if(num == 0x039) return "sys_ppu_thread_recover_page_fault";
        else if(num == 0x038) return "sys_ppu_thread_rename";
        else if(num == 0x037) return "55";
        else if(num == 0x036) return "54";
        else if(num == 0x035) return "_sys_ppu_thread_start";
        else if(num == 0x034) return "_sys_ppu_thread_create";
        else if(num == 0x033) return "sys_ppu_thread_restart";
        else if(num == 0x032) return "sys_ppu_thread_stop";
        else if(num == 0x031) return "sys_ppu_thread_get_stack_information";
        else if(num == 0x030) return "sys_ppu_thread_get_priority";
        else if(num == 0x02F) return "sys_ppu_thread_set_priority";
        else if(num == 0x02E) return "sys_ppu_thread_get_join_state";
        else if(num == 0x02D) return "sys_ppu_thread_detach";
        else if(num == 0x02C) return "sys_ppu_thread_join";
        else if(num == 0x02B) return "sys_ppu_thread_yield";
        else if(num == 0x029) return "_sys_ppu_thread_exit";
        else if(num == 0x01F) return "31";
        else if(num == 0x01E) return "30";
        else if(num == 0x01D) return "29";
        else if(num == 0x01C) return "28";
        else if(num == 0x01B) return "27";
        else if(num == 0x01A) return "26";
        else if(num == 0x019) return "sys_process_get_sdk_version";
        else if(num == 0x018) return "24";
        else if(num == 0x017) return "sys_process_wait_for_child2";
        else if(num == 0x016) return "22";
        else if(num == 0x015) return "_sys_process_spawn";
        else if(num == 0x013) return "sys_process_kill";
        else if(num == 0x012) return "sys_process_getppid";
        else if(num == 0x00E) return "sys_process_is_spu_lock_line_reservation_address";
        else if(num == 0x00D) return "sys_process_get_id";
        else if(num == 0x00C) return "sys_process_get_number_of_object";
        else if(num == 0x005) return "sys_process_detach_child";
        else if(num == 0x004) return "sys_process_get_status";
        else if(num == 0x003) return "sys_process_exit";
        else if(num == 0x002) return "sys_process_wait_for_child";
        else if(num == 0x001) return "sys_process_getpid";
        else
	                    return form ("%d", num);
}

